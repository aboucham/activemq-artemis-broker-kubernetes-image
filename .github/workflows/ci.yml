name: CI

env:
  IMAGE_NAME: activemq-artemis-broker-kubernetes
  S2I_RELEASE_URL: https://github.com/openshift/source-to-image/releases/download/v1.3.1/source-to-image-v1.3.1-a5a77147-linux-amd64.tar.gz

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      snapshot:
        description: 'Snapshot'
        required: false
        default: false
        type: boolean
      trigger_children:
        description: 'Trigger children'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Install prerequisites
        run: >
          mkdir -p $HOME/.local/bin &&
          echo "$HOME/.local/bin" >> $GITHUB_PATH &&
          sudo apt-get install gcc libkrb5-dev &&
          sudo pip install docker==5.0.3 docker-squash cekit odcs[client] packaging==21.3 behave lxml &&
          wget -O source-to-image.tar.gz $S2I_RELEASE_URL &&
          tar -C $HOME/.local/bin -xvf source-to-image.tar.gz

      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Update base image
        if: ${{ inputs.snapshot }}
        run: |
          BASE_IMAGE="quay.io/${{ secrets.QUAY_NAMESPACE }}/activemq-artemis-broker@$(skopeo inspect docker://quay.io/${{ secrets.QUAY_NAMESPACE }}/activemq-artemis-broker:snapshot | jq -r '.Digest')"
          sed -i "s~from.*~from: \"${BASE_IMAGE}\"~g" image.yaml

      - name: Build the image
        run: "cekit --verbose build --overrides \"{'labels': [{'name': 'quay.expires-after', 'value': '90d'}, {'name': 'git-sha', 'value': '$GITHUB_SHA'}]}\" docker --tag $IMAGE_NAME:dev.latest"

      - name: Check the image
        run: >
          cekit test --image $IMAGE_NAME:dev.latest behave &&
          export CONTAINER_ID=$(docker run --detach --env AMQ_USER=admin --env AMQ_PASSWORD=admin $IMAGE_NAME:dev.latest) &&
          echo CONTAINER_ID=$CONTAINER_ID && sleep 3 &&
          export CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CONTAINER_ID) &&
          echo CONTAINER_IP=$CONTAINER_IP &&
          docker cp $CONTAINER_ID:/opt/amq ./ &&
          ./amq/bin/artemis check queue --name TEST --produce 1000 --browse 1000 --consume 1000 --user admin --password admin --url tcp://$CONTAINER_IP:61616 &&
          docker kill $CONTAINER_ID

      - name: Push the image
        if: ${{ github.event_name == 'push' }}
        run: >
          export IMAGE_TAG=dev.$(date +%Y%m%d).$(git rev-parse --short "$GITHUB_SHA") &&
          docker login quay.io --username=${{ secrets.QUAY_USERNAME }} --password-stdin <<< ${{ secrets.QUAY_PASSWORD }} &&
          docker tag $IMAGE_NAME:dev.latest quay.io/${{ secrets.QUAY_NAMESPACE }}/$IMAGE_NAME:$IMAGE_TAG &&
          docker push quay.io/${{ secrets.QUAY_NAMESPACE }}/$IMAGE_NAME:$IMAGE_TAG &&
          docker tag $IMAGE_NAME:dev.latest quay.io/${{ secrets.QUAY_NAMESPACE }}/$IMAGE_NAME:dev.latest &&
          docker push quay.io/${{ secrets.QUAY_NAMESPACE }}/$IMAGE_NAME:dev.latest

      - name: Push the snapshot image
        if: ${{ inputs.snapshot }}
        run: >
          docker login --username=${{ secrets.QUAY_USERNAME }} --password=${{ secrets.QUAY_PASSWORD }} quay.io &&
          docker tag $IMAGE_NAME:dev.latest quay.io/${{ secrets.QUAY_NAMESPACE }}/$IMAGE_NAME:snapshot &&
          docker push quay.io/${{ secrets.QUAY_NAMESPACE }}/$IMAGE_NAME:snapshot

      - name: Trigger children
        if: ${{ inputs.trigger_children }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: 'activemq-artemis-broker-init-image',
              workflow_id: 'ci.yml',
              ref: 'main',
              inputs: {
                snapshot: '${{ inputs.snapshot }}',
                trigger_children: 'true'
              }
            });
